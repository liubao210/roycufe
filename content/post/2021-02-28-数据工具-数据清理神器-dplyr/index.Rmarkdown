---
title: '[数据工具]数据清理神器 - dplyr'
author: baoliu
date: '2021-02-28'
slug: []
categories:
  - R
tags:
  - dplyr
df_print: paged
output: 
  df_print: paged
  html_document:
    toc: true
    toc_depth: 4
    toc_float: 
      collapsed: false
      smooth_scroll: false
      
    df_print: paged
    theme: cerulean
---



  *“There are definitely some academic statisticians who just don’t understand why what I do is statistics, but basically I think they are all wrong . What I do is fundamentally statistics. The fact that data science exists as a field is a colossal failure of statistics. To me, that is what statistics is all about. It is gaining insight from data using modelling and visualization. Data munging and manipulation is hard and statistics has just said that’s not our domain.” _ Hadley Wickham*

  数据的清理是数据统计分析的第一步，通常也是最耗时费力的一步，这通常给多数没有接触过编程的学者带来很多麻烦。
  对于没有编程基础的人而言，为了解决一个简单的问题去学习base R的数据处理或者pandas等会耗费很多时间，投入产出不划算。  
  **dplyr**的设计就是为了解决这个问题，它通过select、filter、 arrange、mutate、summarise、group_by等容易理解和记忆的函数，极大的简化了数据清理的过程。
  
<!-- | 函数名称            | 主要作用              | 备注   | -->
<!-- | :----:              | :----:                | :----: | -->
<!-- |   select            |  选择指定的列         |        | -->
<!-- |   filter            |  选择指定的行         |        | -->
<!-- |   arrange           |  排序                 |        | -->
<!-- |   mutate            |  修改、新增列         |        | -->
<!-- |   summarise         |  汇总计算             |        | -->
<!-- |   group_by          |  分组                 |        | -->

  
  下面为大家一一介绍。


**安装和加载**  
运行以下程序加载包，如果没有安装会执行安装程序。

```{r library, warning=FALSE, message=FALSE}
if(!"dplyr" %in% installed.packages()){
    install.packages("dplyr")
  }

library(dplyr)

# 同时加载knitr， 方便数据展示
library(knitr)
```


**构建一个简单数据集**

```{r}
scores <-  data.frame(
  name = c("zhangsan", "lisi", "wangwu"),
  gender = c("F", "M", "F"),
  math = c(90, 87, 92)
)

kable(scores)
```

## 基本用法

**新建一列 mutate**
```{r mutate}
# 新建一列英文成绩
scores <- mutate(scores, eng = c(77, 93, 81))
# 新建一列均分
scores <- mutate(scores, mean_score = (math + eng) / 2)


# 使用管道符的写法
scores <- scores %>% 
  mutate(eng = c(77, 93, 81)) %>% 
  mutate(mean_score = (math + eng) / 2)

# 同时生成多列
scores <- scores %>% 
  mutate(eng = c(77, 93, 81),
         mean_score = (math + eng) / 2)

kable(scores)
```

**管道符**
dplyr提供了非常方便的管道符, 最常用的是 %>% ，它的作用是把管道符前的内容，当作变量传递给后面的方法。这个管道符可以通过快捷键 “Ctrl + Shift + M”输入(赋值符号 <- 可以通过快捷键 “Alt + -”输入)。  
在上面的例子中，管道符把scores传递给后面的mutate()并当作第一个参数。  
这种方法在需要进行快速复杂处理的时候非常有用，后面的例子我会尽量使用两种方式展示。


**排序 arrange**
通过arrange()实现按照某一列或几列排序，默认升序。可以通过desc()实现降序排列

```{r}
# 把成绩数据按照数学成绩升序排序
scores <- arrange(scores, math)
kable(scores)

# 把成绩数据按照数学、英语成绩升序排序
scores <- arrange(scores, math, eng)
kable(scores)

# 把成绩数据按照数学成绩降序排序
scores <- arrange(scores, desc(math))
kable(scores)

# 使用管道符书写
scores <- scores %>% arrange(math)
scores <- scores %>% arrange(desc(math))
```


**选择列 select**
可以通过减号，实反向选择。  
选择的时候列会按照指定顺序重新排序

```{r}
# 删除均分mean_score列
## 减号待变从原数据删除某列
new_data <- select(scores, -mean_score)
## 若不使用减号，代表仅取出指定的列
new_data <- select(scores, name, gender, math)
kable(new_data)

# 管道符
new_data <- scores %>% select(-mean_score)
new_data <- scores %>% select( gender, math, name)
```


**选择符合条件的行**

**汇总计算**

**分组 group_by**

## 其他常用方法

**表连接**


**列重命名**


#### —————————————————— 
**作者：刘保**  
**邮箱：roycufe@gmail.com**  
**手机/微信：13051897793**  


